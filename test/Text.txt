import 'package:flutter/material.dart';
import 'package:speech_recognition/speech_recognition.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: VoiceHome(),
    ); //Material App
  }
}

class VoiceHome extends StatefulWidget {
  @override
  VoiceHomeState createState() => VoiceHomeState();
}

class VoiceHomeState extends State<VoiceHome> {
  SpeechRecognition _speech;
  bool _isAvailable = false;
  bool _isListening = false;

  String resultText = "";

  @override
  void initState() {
    super.initState();
    initSpeechRecognizer();
  }
  @override
  void initState() {
    super.initState();
    initSpeechRecognizer();
  }


    String _currentLocale;
    _speech.setCurrentLocaleHandler((String locale) =>
        setState(() => _currentLocale = locale));

    _speech.setRecognitionStartedHandler(
          () => setState(() => _isListening = true),
    );

    _speech.setRecognitionResultHandler(
          (String text) => setState(() => resultText = text),
    );

    _speech.setRecognitionCompleteHandler(
          () => setState(() => _isListening = false),
    );

    _speech.activate().then(
          (res) => setState(() => _isAvailable = res),
    );

    _speech.listen(locale:_currentLocale).then((result)=> print('result : $result'));

  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: <Widget>[
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                FloatingActionButton(
                  child: Icon(Icons.cancel),
                  mini: true,
                  backgroundColor: Colors.deepOrange,
                  onPressed: () {
                    if (_isListening)
                      _speech.cancel().then(
                            (result) =>
                            setState(() {
                              _isListening = result;
                              resultText = "";
                            }),
                      );
                  },
                ),
                FloatingActionButton(
                  child: Icon(Icons.mic),
                  backgroundColor: Colors.lightGreen,
                  onPressed: () {
                    if (_isAvailable && !_isListening)
                      _speech
                          .listen(locale: "en-US")
                          .then((result) => print('$result'));
                  },
                ),
                FloatingActionButton(
                  child: Icon(Icons.stop),
                  mini: true,
                  backgroundColor: Colors.deepPurple,
                  onPressed: () {
                    if (_isListening)
                      _speech.stop().then(
                            (result) => setState(() => _isListening = result),
                      );
                  },
                ),
              ],
            ),
            Container(
              width: MediaQuery
                  .of(context)
                  .size
                  .width * 0.8,
              decoration: BoxDecoration(
                color: Colors.cyanAccent[100],
                borderRadius: BorderRadius.circular(6.0),
              ),
              padding: EdgeInsets.symmetric(
                vertical: 8.0,
                horizontal: 12.0,
              ),
              child: Text(
                resultText,
                style: TextStyle(fontSize: 24.0),
              ),
            ),
          ],
        ),
      ),
    );
  }
}